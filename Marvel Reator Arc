import javax.swing.JFrame;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.awt.GLCanvas;
import java.lang.Math;

public class Marvel implements GLEventListener {
@Override
public void display(GLAutoDrawable drawable) {
	
final GL2 gl = drawable.getGL().getGL2();

float ang,x,y;
gl.glColor3f(1f,1f,1f);
	gl.glBegin(GL2.GL_POLYGON);
		for (int i=0;i<=360;i++) {

			ang = (float)((i * Math.PI)/180.0);
			x = (float)(0.0f + (Math.cos( ang) * 0.92f));
			y = (float)(0.0f + (Math.sin ( ang ) * 0.92f));
				gl.glVertex2f(x,y);
	
}
gl.glEnd();
			
gl.glBegin (GL2.GL_TRIANGLES);
 	gl.glColor3f(0.0f, 0.21f, 0.38f);
	// Triangulo Maior
	gl.glVertex2f(-0.80f, 0.515f);
	gl.glVertex2f( 0.80f,0.515f);
	gl.glVertex2f(0.00f,-0.915f);

	gl.glBegin (GL2.GL_TRIANGLES);
 	gl.glColor3f(0.5f, 0.0f, 1.0f);
	// Triangulo Maior
	gl.glVertex2f(-0.65f, 0.455f);
	gl.glVertex2f( 0.65f,0.455f);
	gl.glVertex2f(0.00f,-0.715f);
	
	gl.glBegin (GL2.GL_TRIANGLES);
 	gl.glColor3f(0.5f, 0.0f, 1.0f);
	// Triangulo Medio
	gl.glVertex2f(-0.20f, 0.155f);
	gl.glVertex2f( 0.20f,0.155f);
	gl.glVertex2f(0.00f,-0.515f);

	
	gl.glEnd();
	gl.glFlush();
	

	



}
	public static void main(String[] args) { 
	// Obtendo o objeto capabilities do profile GL2
	final GLProfile profile = GLProfile.get(GLProfile.GL2);
	GLCapabilities capabilities = new GLCapabilities(profile);
	// A canvas
	final GLCanvas glcanvas = new GLCanvas(capabilities);
	Marvel l = new Marvel();
	glcanvas.addGLEventListener(l);
	glcanvas.setSize(400,400);
	// Criando uma janela
	final JFrame frame = new JFrame ("Marvel");
	// Adicionando a canvas Ã  janela
	frame.getContentPane().add(glcanvas);
	frame.setSize(frame.getContentPane().getPreferredSize());
	frame.setVisible(true);
	}
	@Override
	public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height) { }
	@Override
	public void init(GLAutoDrawable drawable) { }
	@Override
	public void dispose(GLAutoDrawable drawable) { }
